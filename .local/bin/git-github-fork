#!/usr/bin/env python3
from __future__ import annotations

import argparse
import json
import os
import shlex
import subprocess
import sys
import urllib.request
from pathlib import Path
from typing import NoReturn, Sequence


def get_slug() -> str:
    cmd = shlex.split("git config remote.origin.url")
    remote = subprocess.check_output(cmd, encoding="UTF-8").strip()

    ssh_prefix = "git@github.com:"
    assert remote.startswith(ssh_prefix), remote
    _, _, slug = remote.partition(":")
    return slug


def load_config() -> dict[str, str]:
    filename = Path("~/.config/github/github-auth.json").expanduser().resolve()
    mode = filename.stat().st_mode & 0o777

    if sys.platform != "win32" and mode != 0o600:
        raise SystemExit(
            f"{filename} has too-permissive permissions, Expected 0o600"
            f"got 0o{mode:o}",
        )

    with open(filename) as f:
        return json.load(f)


def fork(slug: str, token: str) -> None:
    url = f"https://api.github.com/repos/{slug}/forks"
    print(url)
    req = urllib.request.Request(url, data=b"")
    req.add_header("Authorization", f"token {token}")
    urllib.request.urlopen(req)


def add_remote(slug: str, username: str) -> NoReturn:
    _, _, repo_name = slug.partition("/")
    slug = f"{username}/{repo_name}"
    cmd = shlex.split(f"git remote add {username} git@github.com:{slug}")
    os.execvp(cmd[0], cmd)


def main(argv: Sequence[str] | None = None) -> NoReturn:
    parser = argparse.ArgumentParser()
    parser.parse_args(argv)

    slug = get_slug()
    auth = load_config()
    fork(slug, auth["token"])
    add_remote(slug, auth["username"])


if __name__ == "__main__":
    raise SystemExit(main())
